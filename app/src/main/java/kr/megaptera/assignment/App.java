/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.studio.http.server;

import com.google.gson.Gson;
import com.google.gson.JsonParser;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;

import static java.lang.Integer.parseInt;

public class App {
    public Socket socket;
    public String statusCode = "";
    public String statusText = "";
    public String method = "";
    public String path = "";
    public String strBuffer = "";
    Gson gson = new Gson();
    int taskId = 1;
    String responseBody = "";
    byte[] bytes = new byte[0];


    Map<Integer, String> tasks = new HashMap<>();

    public static void main(String[] args) throws IOException {
        com.studio.http.server.App app = new com.studio.http.server.App();
        app.run();
    }

    private void run() throws IOException {
        // 1. listen
        ServerSocket listener = new ServerSocket(8080, 0);
        System.out.println("listen");

        while (true) {
            // 2. Accept
            socket = listener.accept();
            System.out.println("accept");

            // 3. Request
            // 3-1. Read data
            Reader reader = new InputStreamReader(socket.getInputStream());
            CharBuffer charBuffer = CharBuffer.allocate(1_000_000);
            reader.read(charBuffer);
            charBuffer.flip();
            strBuffer = charBuffer.toString();

            // 3-2. Get info from data
            getInfo(strBuffer);

            // 4. Response
            responseMethod(strBuffer);

            responseBody = gson.toJson(tasks);
            bytes = responseBody.getBytes();

            String message = "" +
                    "HTTP/1.1 " + statusCode + " " + statusText + "\n" +
                    "Content-Length: " + bytes.length + "\n" +
                    "Content-Type: text/html; charset=UTF-8\n" +
                    "Host: LocalHost:8080\n" +
                    "\n" + responseBody;

            Writer writer = new OutputStreamWriter(socket.getOutputStream());
            writer.write(message);
            writer.flush();

            // 4. close
            socket.close();
        }
    }

    private void responseMethod(String strBuffer) {
        if (path.equals("/tasks")) {

            if (method.equals("GET")) {
                // Method -> GET
                responseGET();

            } else if (method.equals("POST")) {
                // Method -> POST
                responsePOST();
            }
        } else {

            if (method.equals("PATCH")) {
                // Method - POST
                responsePATCH();
            } else if (method.equals("DELETE")) {
                // Method - DELETE
                responseDELETE();
            }


        }
    }

    private void responseDELETE() {
        int id = parseInt(path.split("/")[2]);

        if (tasks.containsKey(id)) {
            statusCode = "200";
            statusText = "OK";

            tasks.remove(id);

        } else {
            statusCode = "404";
            statusText = "Not Found";
        }
    }

    private void responsePATCH() {
        int id = parseInt(path.split("/")[2]);
        String requestBody = strBuffer.split("\n\r")[1];

        if (tasks.containsKey(id)) {
            if (requestBody.equals("\n")) {
                statusCode = "400";
                statusText = "Bad Request";
            } else {
                statusCode = "200";
                statusText = "OK";

                tasks.remove(id);

                String task = JsonParser.parseString(requestBody).getAsJsonObject().get("task").getAsString();
                tasks.put(id, task);
            }

        } else {
            statusCode = "404";
            statusText = "Not Found";
        }
    }

    private void responsePOST() {
        String requestBody = strBuffer.split("\n\r")[1];
        if (requestBody.equals("\n")) {
            statusCode = "400";
            statusText = "Bad Request";
        } else {
            String task = JsonParser.parseString(requestBody).getAsJsonObject().get("task").getAsString();
            tasks.put(taskId++, task);
            statusCode = "201";
            statusText = "Created";
        }
    }

    private void responseGET() {
        statusCode = "200";
        statusText = "OK";
    }

    private void getInfo(String strBuffer) {
        String[] lines = strBuffer.split("\r\n");
        String requestLine = lines[0];
        String[] requestLineParts = requestLine.split(" ");
        method = requestLineParts[0];
        path = requestLineParts[1];
    }

}